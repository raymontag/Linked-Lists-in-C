Structures:


element_t

A single element within a list.

@data: A void pointer to an allocated variable
@right: A pointer to the element rightward
@left: A pointer to the element leftward


head_t

The head of the list. All operations work with this structure.

@first: A pointer to the first element within the list
@current: A pointer to the current selected element
@last: A pointer to the last element within the list
@index: The index of the current element
@size: The number of elements


Functions:


head_t *new_list();

Initialize a new list

The return value is a pointer to the new list or NULL if
the operation was not successful


element_t *add_element(head_t *list);

Append an empty element to the end of the list. The element
becomes the current element of the list.

@list: The list

Return a pointer to the new element or NULL


int change_current_element(head_t *list, element_t *element);

Changes the current element, to the given one. The
element must exist in the list.

@list: The list
@element: A pointer to the element

The function returns 1 in the case of success or 0 if
the operations was not successful


int clear_list(head_t *list);

Remove all elements of the list, but the list is still
usable

@list: The list

The return value is 1


int copy_list(head_t *list1, head_t *list2);

Copy on list into another, so they are identical

@list1: The origin list
@list2: The destination of list1

The return value is 1


int delete_element(head_t *list, ...);

Delete the current element and sets the current element
to the previous one. If the deleted element was the
first one the new current element is NULL. If you set
the optional argument to 1 than the current element will
be the second one.

@list: The list
@optional: 1 or nothing (if it's something else nothing
will happen)

Returns 1 or 0, if the operation was not successful


element_t *first_element(head_t *list);

Set the list to the first element.

@list: The address of a list head

Returns a pointer to the first element


int free_list(head_t *list);

Delete the whole list including it's head, so the memory
is no longer allocated and the list is no longer usable

@list: The list

Returns 1


element_t *insert_element(head_t *list);

Inserts an empty element before the current one. If the
list is empty the new element is the first. The new
element will be the current one.

@list: The list

Returns a pointer to the new element.


element_t *last_element(head_t *list);

Sets the current element of the given list to it's last
one.

@list: The list

Returns a pointer to the last element.


int list_index(head_t *list);

Returns the index number of the current element starting
with 0.

@list: The list

Returns the index starting with 0 for the first element.
Returns -1 if there is no current element.


int list_size(head_t *list);

Returns the number of elements in the list.

@list: The list

The return value is the size of the list.


element_t *next_element(head_t *list);

Set the current element to the next one. If there is no
current element, the next element is the first.

@list: The list

The function returns a pointer to the new current element
or NULL if it's the end of the list.


element_t *previous_element(head_t *list);

Sets the current element to the list to the previous one.

@list: The list

Returns the pointer to the new current element or NULL
if the list is empty or if the old current element is the
first one. If there is no current element, the return
value is NULL, too.


int reset_list(head_t *list);

Sets the current element to NULL, so there is no current
element.

@list: The list

Returns 1


int select_element(head_t *list, int index);

Sets the current element to that one with the specified
index. The indexes start with 0.

@list: The list
@index: The index

Returns 1 if everything was fine or 0


int swap_elements(head_t *list, element_t *element1, element_t *element2);

This function swaps the given elements. They must be in
the same list.

@list: The list
@element1: Pointer to the 1st element
@element2:Pointer to the 2nd element

Returns 1 if everything was fine or 0


Some Examples:

#include <stdio.h>
#include <stdlib.h>

#include <lnlists.h>

int main() {
	head_t *list1, *list2;
	int i, *j;
	
	list1 = new_list(); /*Initialize the new list*/
	
	for (i = 0; i < 10; i++) {
		add_element(list1);
		j = (int *) malloc(sizeof(int));
		*j = i;
		list1->current->data = (void *) j;
	}
	
	change_current_element(list1, list1->first);
	printf("%d\n", *(int *)list1->current->data); /*Prints '0'*/
	
	for (i = 0; i < 10; i++) {
		printf("%d\n", *(int *)list1->current->data);
		next_element(list1);
	} /*Prints 0 to 9 one below the other*/
	
	for (i = 0; i < 10; i++) {
		printf("%d\n", *(int *)list1->current->data);
		previous_element(list1);
	} /*Prints 9 to 0 one below the other*/
	
	select_element(list1, 4);
	printf("%d\n", *(int *)list1->current->data); /*Prints '4'*/
	
	list2 = new_list();
	copy_list(list1, list2);
	printf("%d\n", *(int *)list2->current->data); /*Prints '4'*/
	
	printf("List index: %d\nList size: %d\n", list1->index, list1->size); /*Prints '4' and '10'*/
	
	free_list(list1);
	free_list(list2);

	return 0;
}


Don't forget the option -llnlists when compiling with gcc.

The other functions are self-explanatory if you understand the main concept shown
in this example.